

interface AntManagementProps {
    ants: Ant[]
    chambers: Chamber[]
    larvae: Array<{ id: string; evolveTime: number }>
    currentTime: number
    researchedTechs: string[]
    onEvolveToType: (larvaId: string, antType: "worker" | "soldier" | "cultivator") => void
    onAssignAnt: (antId: string, chamberId: string | null) => void
  }

  interface AntManagementProps {
    ants: Ant[]
    chambers: Chamber[]
    larvae: Array<{ id: string; evolveTime: number }>
    currentTime: number
    researchedTechs: string[]
    onEvolveToType: (larvaId: string, antType: "worker" | "soldier" | "cultivator") => void
    onAssignAnt: (antId: string, chamberId: string | null) => void
  }

  export interface Chamber {
    id: string
    type:
      | "royal"
      | "nursery"
      | "storage"
      | "barracks"
      | "laboratory"
      | "warehouse"
      | "granary"
      | "dining"
      | "mushroom_farm"
    level: number
    tunnels: number // Número de túneles que tiene esta cámara
    connectedChambers: string[] // IDs de cámaras conectadas a través de túneles
  }

  interface ChamberUpgradeProps {
    chamber: Chamber
    resources: { food: number; dirt: number; wood: number; leaves: number }
    availableAnts: number
    onUpgrade: (chamberId: string) => void
    onAddTunnel: (chamberId: string) => void
    royalLevel: number
  }

  interface ConstructionRequirementsProps {
    chamberType: keyof typeof CHAMBER_INFO
    chambers: Chamber[]
    royalLevel: number
    researchedTechs: string[]
  }

  interface ExpeditionCardProps {
    resourceType: "food" | "dirt" | "wood" | "leaves"
    onStartExpedition: (resourceType: "food" | "dirt" | "wood" | "leaves", antsCount: number) => void
    availableAnts: number
  }

  interface GameSettingsModalProps {
    settings: GameSettings
    onSettingsChange: (settings: GameSettings) => void
  }

  interface GameSaveData {
    queen: {
      id: string
      nextEggTime: number
    }
    eggs: Array<{
      id: string
      hatchTime: number
    }>
    larvae: Array<{
      id: string
      evolveTime: number
    }>
    ants: Array<{
      id: string
      type: "worker" | "soldier" | "cultivator"
      status: "idle" | "working" | "building" | "assigned"
      assignment?: string
      experience: number
    }>
    resources: {
      food: number
      dirt: number
      wood: number
      leaves: number
    }
    chambers: Array<{
      id: string
      type: string
      level: number
      tunnels: number
      connectedChambers: string[]
      assignedAnts: string[]
    }>
    expeditions: Array<{
      id: string
      type: "food" | "dirt" | "wood" | "leaves"
      antsCount: number
      startTime: number
      endTime: number
      location: string
    }>
    researchedTechs: string[]
    currentResearch: { techId: string; startTime: number; endTime: number } | null
    storageCapacity: {
      food: number
      dirt: number
      wood: number
      leaves: number
    }
    lastMushroomProduction: number
    lastSaveTime: number
  }
  export interface KeyboardShortcuts {
    // Navegación
    switchToAnthill: string
    switchToAnts: string
    switchToOutside: string
    switchToTechnology: string
  
    // Acciones rápidas
    quickSave: string
    openSettings: string
    openTutorial: string
  
    // Construcción
    buildNursery: string
    buildLaboratory: string
    buildWarehouse: string
    buildGranary: string
  
    // Expediciones
    sendFoodExpedition: string
    sendDirtExpedition: string
    sendWoodExpedition: string
    sendLeavesExpedition: string
  
    // Gestión de hormigas
    evolveAllToWorkers: string
    evolveAllToSoldiers: string
    evolveAllToCultivators: string
  
    // Cámaras
    upgradeRoyalChamber: string
    upgradeAllNurseries: string
  }

  interface KeyboardShortcutsModalProps {
    shortcuts: KeyboardShortcuts
    onShortcutsChange: (shortcuts: KeyboardShortcuts) => void
  }

  export interface GameNotification {
    id: string
    type: "success" | "warning" | "info" | "error" | "achievement"
    category: "population" | "resources" | "construction" | "research" | "expedition" | "system" | "achievement"
    title: string
    message: string
    timestamp: number
    duration?: number // en ms, undefined = permanente hasta que se cierre
    icon?: string
    progress?: number // 0-100 para notificaciones con progreso
    actions?: Array<{
      label: string
      action: () => void
      variant?: "default" | "outline" | "destructive"
    }>
    data?: any // datos adicionales para la notificación
  }
  
  interface NotificationSystemProps {
    notifications: GameNotification[]
    onDismiss: (id: string) => void
    onDismissAll: () => void
    maxVisible?: number
    position?: "top-right" | "top-left" | "bottom-right" | "bottom-left"
    showHistory?: boolean
    soundConfig?: SoundConfig // Nueva prop
  }
  export interface RandomEvent {
    id: string
    type: "positive" | "negative" | "neutral" | "choice"
    category: "weather" | "discovery" | "visitor" | "disaster" | "opportunity" | "mystery"
    title: string
    description: string
    icon: string
    rarity: "common" | "uncommon" | "rare" | "legendary"
    duration?: number // en ms, para eventos temporales
    effects: {
      immediate?: {
        resources?: { food?: number; dirt?: number; wood?: number; leaves?: number }
        population?: { eggs?: number; larvae?: number; ants?: number }
        chambers?: { damage?: number; boost?: number }
      }
      temporary?: {
        duration: number // en ms
        resourceMultiplier?: { food?: number; dirt?: number; wood?: number; leaves?: number }
        expeditionBonus?: number
        constructionBonus?: number
        researchBonus?: number
        populationBonus?: number
      }
      choices?: Array<{
        id: string
        text: string
        effects: RandomEvent["effects"]["immediate"]
        consequences?: string
      }>
    }
    requirements?: {
      minAnts?: number
      minChambers?: number
      hasResearch?: string[]
      minResources?: { food?: number; dirt?: number; wood?: number; leaves?: number }
    }
    cooldown?: number // tiempo antes de que pueda volver a aparecer
    onlyOnce?: boolean // evento único
  }

  interface RandomEventSystemProps {
    gameState: any
    onEventTriggered: (event: RandomEvent, choice?: string) => void
    currentTime: number
    gameSettings: any
  }
  
  interface ActiveEvent {
    event: RandomEvent
    startTime: number
    endTime?: number
    choice?: string
  }

  interface SaveLoadModalProps {
    onLoadGame: () => void
    onNewGame: () => void
  }



  interface SoundSystemProps {
    config: SoundConfig
    onConfigChange?: (config: SoundConfig) => void
  }

  export interface Technology {
    id: string
    name: string
    description: string
    category: "biology" | "engineering" | "exploration" | "military"
    cost: { food: number; dirt: number; wood: number }
    researchTime: number
    prerequisites: string[]
    effects: {
      eggLayingSpeedBonus?: number
      hatchingSpeedBonus?: number
      evolutionSpeedBonus?: number
      explorationSpeedBonus?: number
      explorationEfficiencyBonus?: number
      maxPopulationBonus?: number
      newUnits?: string[]
      newBuildings?: string[]
      maxNurseriesBonus?: number
    }
  }
  
  interface TechnologyTreeProps {
    researchedTechs: string[]
    currentResearch: { techId: string; startTime: number; endTime: number } | null
    resources: { food: number; dirt: number; wood: number }
    onStartResearch: (techId: string) => void
    currentTime: number
    hasGranary: boolean // Nueva prop para saber si tiene granero
  }